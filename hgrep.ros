#!/bin/sh
#|-*- mode:lisp -*-|#
#| replacement of history |grep -i <word>
exec ros -Q -- $0 "$@"
|#

(unless (find-package :iterate)
  (ql:quickload '(:uiop :iterate :cl-ansi-text) :silent t))

(defpackage :ros.script.history.3685353026
  (:use :cl :iterate))

(in-package :ros.script.history.3685353026)

(defparameter *histfiles* '(("zsh" . ".zsh_history") ("bash" . ".bash_history")))

(defparameter shell
  (let ((shell-path (sb-unix::posix-getenv "SHELL")))
    (subseq shell-path (1+ (position #\/ shell-path :from-end t)))))

(defun histfile (shell)
  (rest (assoc shell *histfiles* :test #'equalp)))

; (defparameter *history-file* (merge-pathnames (user-homedir-pathname)
;                                        ".zsh_history"))

(defparameter *history-file* (merge-pathnames (user-homedir-pathname)
                                              (histfile shell)))


(defun replace-all (string part replacement &key (test #'char=))
 "Returns a new string in which all the occurences of the part
  is replaced with replacement."
 (with-output-to-string (out)
   (loop with part-length = (length part)
         for old-pos = 0 then (+ pos part-length)
         for pos = (search part string
                           :start2 old-pos
                           :test test)
         do (write-string string out
                          :start old-pos
                          :end (or pos (length string)))
         when pos do (write-string replacement out)
         while pos)))

(defun format-output (needle line)
  (replace-all line needle (cl-ansi-text:yellow needle)))

(defun histgrep (grep)
 (iter
   (for line in-file *history-file* using 'read-line)
   (when (search grep line :test #'equalp)
     (collect (if (find #\; line)
                (format-output grep (subseq line (1+ (position #\; line))))
                (format-output grep line))))))

(defun main (&optional n &rest argv)
  (declare (ignore argv))
  (when n
    (let ((res (remove-duplicates (histgrep n) :test #'equalp)))
      (when res
        (format t "~&~{~A ~&~}" (butlast res))
        (uiop:quit 0))))
  (uiop:quit 1))


;;; vim: set ft=lisp lisp:
